# -*- coding: utf-8 -*-
"""Capstone_automatic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U28gOYfcqoAi5Wf3tU5zgBViq_FpfqJD
"""

pip install dash plotly pandas

!pip install ultralytics

!pip install deep_sort_realtime

import cv2
import numpy as np
import pandas as pd
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
from datetime import datetime
from collections import deque
import threading


import dash
from dash import dcc, html
import plotly.express as px


model = YOLO('yolov8n.pt')


tracker = DeepSort(max_age=30)


video_path = "/content/drive/MyDrive/240721 LGFA Semi Final - Cork v Galway.mp4"
cap = cv2.VideoCapture(video_path)
fps = cap.get(cv2.CAP_PROP_FPS)
start_frame = int(35 * 60 * fps)
end_frame = int(36 * 60 * fps)
cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)


FRAME_SKIP = 2


csv_filename = f"gaa_tracking_with_ball_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
csv_headers = ['Time', 'Frame', 'Player_ID', 'X_Position', 'Y_Position', 'Team', 'Ball_X', 'Ball_Y']


player_data = pd.DataFrame(columns=["player_id", "x_position", "y_position", "team"])
ball_positions = deque(maxlen=30)
ball_visible = False
latest_ball_pos = None
current_frame = start_frame


def get_team(player_id):
    try:
        return "Cork" if int(player_id) % 2 == 0 else "Galway"
    except:
        return "Unknown"


app = dash.Dash(__name__)
app.layout = html.Div([
    html.H1("LGFA Semi Final - Cork vs Galway"),
    dcc.Graph(id="live-graph"),
    dcc.Interval(id="interval-component", interval=2000, n_intervals=0)
])

@app.callback(
    dash.dependencies.Output("live-graph", "figure"),
    [dash.dependencies.Input("interval-component", "n_intervals")]
)
def update_graph_live(n):
    global player_data, latest_ball_pos, ball_visible

    if player_data.empty:
        return px.scatter().update_layout(template="plotly_dark")

    player_data["team"] = player_data["player_id"].apply(get_team)

    fig = px.scatter(
        player_data,
        x="x_position",
        y="y_position",
        color="team",
        color_discrete_map={"Cork": "red", "Galway": "blue"},
        hover_data=["player_id"]
    )

    if latest_ball_pos and ball_visible:
        fig.add_scatter(
            x=[latest_ball_pos[0]],
            y=[latest_ball_pos[1]],
            mode="markers",
            marker=dict(size=10, color="yellow"),
            name="Ball"
        )

    fig.update_layout(template="plotly_dark")
    return fig

def run_dash():
    app.run(debug=False)

def video_analysis():
    global player_data, ball_positions, latest_ball_pos, ball_visible, current_frame

    with open(csv_filename, 'w', newline='') as f:
        writer = pd.DataFrame(columns=csv_headers)
        f.write(','.join(csv_headers) + '\n')

        while cap.isOpened() and current_frame < end_frame:
            success, frame = cap.read()
            if not success:
                break

            if current_frame % FRAME_SKIP != 0:
                current_frame += 1
                continue

            resized = cv2.resize(frame, (640, 384))
            results = model(resized)[0]

            detections = []
            ball_box = None

            for box in results.boxes:
                cls = int(box.cls[0])
                conf = float(box.conf[0])
                x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()

                if cls == 0:
                    detections.append(([x1, y1, x2, y2], conf, cls))
                elif cls == 32:
                    ball_box = [x1, y1, x2, y2]

            tracks = tracker.update_tracks(detections, frame=frame)

            player_frame_data = []
            for track in tracks:
                if not track.is_confirmed():
                    continue
                track_id = track.track_id
                ltrb = track.to_ltrb()
                x_center = (ltrb[0] + ltrb[2]) / 2
                y_center = (ltrb[1] + ltrb[3]) / 2

                player_frame_data.append({
                    "player_id": track_id,
                    "x_position": x_center,
                    "y_position": y_center
                })


                row = [
                    datetime.now().strftime('%H:%M:%S'),
                    current_frame,
                    track_id,
                    round(x_center, 2),
                    round(y_center, 2),
                    get_team(track_id),
                    round((ball_box[0] + ball_box[2]) / 2, 2) if ball_box else '',
                    round((ball_box[1] + ball_box[3]) / 2, 2) if ball_box else ''
                ]
                f.write(','.join(str(i) for i in row) + '\n')

            if player_frame_data:
                player_data = pd.DataFrame(player_frame_data)

            if ball_box:
                ball_visible = True
                latest_ball_pos = [
                    (ball_box[0] + ball_box[2]) / 2,
                    (ball_box[1] + ball_box[3]) / 2
                ]
                ball_positions.append(latest_ball_pos)
            else:
                ball_visible = False

            current_frame += 1

        cap.release()


if __name__ == "__main__":
    dash_thread = threading.Thread(target=run_dash)
    dash_thread.daemon = True
    dash_thread.start()
    video_analysis()